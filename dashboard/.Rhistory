value = value,
config = config,
# Modify this if your config file is somewhere else:
file = app_sys("golem-config.yml"),
use_parent = use_parent
)
}
configFetch <- function(configName, valueNames){
config <- configName
values <- valueNames
for(i in values){
configValues[i] <-  get_golem_config(i, config = config)
}
return(configValues)
}
foo <- configFetch(configName = "mod_mooring_sysBatt", valueNames = c('enable', 'name'))
configFetch <- function(configName, valueNames){
config <- configName
values <- valueNames
configValues <- NULL
for(i in values){
configValues[i] <-  get_golem_config(i, config = config)
}
return(configValues)
}
foo <- configFetch(configName = "mod_mooring_sysBatt", valueNames = c('enable', 'name'))
foo
foo$enable
str(foo)
as.list(foo) <- configFetch(configName = "mod_mooring_sysBatt", valueNames = c('enable', 'name'))
foo <- configFetch(configName = "mod_mooring_sysBatt", valueNames = c('enable', 'name'))
str(foo)
configFetch <- function(configName, valueNames){
config <- configName
values <- valueNames
configValues <- NULL
for(i in values){
configValues[i] <-  get_golem_config(i, config = config)
}
return(as.list(configValues))
}
foo <- configFetch(configName = "mod_mooring_sysBatt", valueNames = c('enable', 'name'))
str(foo)
foo$enable
as.logical(foo$enable)
golem::add_fct( "configFetch" )
moorSysBatConfig <-  configFetch(
configName = "mod_mooring_sysBatt",
valueNames = c('enable', 'name', 'sensor_code', 'colour')
)
moorSysBatConfig
moorConfig <-  configFetch(
configName = "mod_mooring",
valueNames = "enable"
)
moorConfig
as.logical(moorConfig$enable)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
foo(
tabInputId = "moorTabset",
tabPanelTitle = "System Battery",
checkboxGroupInputId = "moorSysBatSiteCheckBox",
checkboxGroupChoiceNames = moorSysBatConfig$name,
checkboxGroupChoiceValues = moorSysBatConfig$sensor_code,
dateRangeInputId = "moorSysBatDateRange",
actionButtonInputId = "moorSysBatFetchData",
plotOutputId = "moorSysBatPlot",
sliderOutputId = "moorSysBatDateSliderUI"
)
foo <- function(
tabPanelTitle,
checkboxGroupInputId,
checkboxGroupChoiceNames,
checkboxGroupChoiceValues,
dateRangeInputId,
actionButtonInputId,
plotOutputId,
sliderOutputId
){
tagList(
tabPanel(
title = tabPanelTitle,
checkboxGroupInput(
inputId = checkboxGroupInputId,
label = NULL,
inline = TRUE,
choiceNames = checkboxGroupChoiceNames,
choiceValues = checkboxGroupChoiceValues
),
fluidRow(
column(
8,
dateRangeInput(
inputId = dateRangeInputId,
label = NULL,
start = Sys.Date()-7,
end = Sys.Date()
)
),
column(
4,
actionButton(
inputId = actionButtonInputId,
label = "Plot"
)
)
),
plotOutput(
outputId = plotOutputId
),
uiOutput(
outputId = sliderOutputId
)
)
)
}
fii <- function(
sliderInputId,
minDateInput,
maxDateInput
){
tagList(
sliderInput(
inputId = sliderInputId,
label = "Filter dates:",
min = as.Date(minDateInput),
max = as.Date(maxDateInput),
value = c(as.Date(minDateInput),as.Date(maxDateInput)),
timeFormat="%Y-%m-%d",
width = '95%',
animate = animationOptions(1000)
)
)
}
foo(
tabInputId = "moorTabset",
tabPanelTitle = "System Battery",
checkboxGroupInputId = "moorSysBatSiteCheckBox",
checkboxGroupChoiceNames = moorSysBatConfig$name,
checkboxGroupChoiceValues = moorSysBatConfig$sensor_code,
dateRangeInputId = "moorSysBatDateRange",
actionButtonInputId = "moorSysBatFetchData",
plotOutputId = "moorSysBatPlot",
sliderOutputId = "moorSysBatDateSliderUI"
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#' Read App Config
#'
#' @param value Value to retrieve from the config file.
#' @param config GOLEM_CONFIG_ACTIVE value. If unset, R_CONFIG_ACTIVE.
#' If unset, "default".
#' @param use_parent Logical, scan the parent directory for config file.
#'
#' @noRd
get_golem_config <- function(
value,
config = Sys.getenv(
"GOLEM_CONFIG_ACTIVE",
Sys.getenv(
"R_CONFIG_ACTIVE",
"default"
)
),
use_parent = TRUE
){
config::get(
value = value,
config = config,
# Modify this if your config file is somewhere else:
file = app_sys("golem-config.yml"),
use_parent = use_parent
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
get_golem_config()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
set_golem_options()
golem::set_golem_options()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
get_golem_config(
"enable"
)
get_golem_config(
"mod_weather"
)
get_golem_config()
get_golem_config(value = "golem_name")
get_golem_config(value = "enable")
get_golem_config(value = "enable", config = "mod_weather")
set_golem_options(key='source', value = 'TEST, BOM, BOM, BOM, BOM', config = 'mod_weather_temp')
amend_golem_config(key='source', value = 'TEST, BOM, BOM, BOM, BOM', config = 'mod_weather_temp')
golem::amend_golem_config(key='source', value = 'TEST, BOM, BOM, BOM, BOM', config = 'mod_weather_temp')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
get_golem_config("name", config = "mod_weather_temp")
weatherMapStations <- data.frame(
name = get_golem_config("name", config = "mod_weather_temp"),
colour = get_golem_config("colour", config = "mod_weather_temp"),
source = get_golem_config("source", config = "mod_weather_temp"),
lat = get_golem_config("lat", config = "mod_weather_temp"),
lon = get_golem_config("lon", config = "mod_weather_temp")
)
View(weatherMapStations)
as.list(get_golem_config("name", config = "mod_weather_temp"))
weatherMapStations <- data.frame(
name = configList(get_golem_config("name", config = "mod_weather_temp")),
colour = configList(get_golem_config("colour", config = "mod_weather_temp")),
source = configList(get_golem_config("source", config = "mod_weather_temp")),
lat = configListget_golem_config("lat", config = "mod_weather_temp")),
lon = configList(get_golem_config("lon", config = "mod_weather_temp"))
#' configList
#'
#' @description A utils function
#'
#' @return The return value, if any, from executing the utility.
#'
#' @noRd
configList <- function(configVals){
list  <- trimws(unlist(strsplit(configVals, ",")))
return(list)
}
weatherMapStations <- data.frame(
name = configList(get_golem_config("name", config = "mod_weather_temp")),
colour = configList(get_golem_config("colour", config = "mod_weather_temp")),
source = configList(get_golem_config("source", config = "mod_weather_temp")),
lat = configList(get_golem_config("lat", config = "mod_weather_temp")),
lon = configList(get_golem_config("lon", config = "mod_weather_temp"))
)
View(weatherMapStations)
weatherMapStations[["lon"]]
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
get_golem_config("enable", config = "mod_weather")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
modWeatherEnable <- as.logical(
get_golem_config("enable", config = "mod_weather")
)
if(isTRUE(modWeatherEnable)){
print(paste0("modWeatherEnable: ", modWeatherEnable))
} else {
print(paste0("modWeatherEnable: ", modWeatherEnable))
}
isTRUE(modWeatherTempEnable)
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
leaflet::leafletProxy(
mapId = 'weatherMap'
) %>%
leaflet::addCircleMarkers(
lng = as.numeric(weatherMapStations[["lon"]]),
lat = as.numeric(weatherMapStations[["lat"]]),
color = "white",
radius = 7,
weight = 2,
fillColor = weatherMapStations[["colour"]],
opacity = 1,
fillOpacity = 1,
popup = paste0("<b>Station Name: </b>",weatherMapStations[["name"]], "<br><b>Agency: </b>", weatherMapStations[["source"]])
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
leaflet::leaflet() %>%
leaflet::addTiles(urlTemplate = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}') %>%
leaflet::setView(115.8613, -31.9523, 8)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
