if(isTRUE(modWeatherEnable)){
print(paste0("modWeatherEnable: ", modWeatherEnable))
} else {
print(paste0("modWeatherEnable: ", modWeatherEnable))
}
isTRUE(modWeatherTempEnable)
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
leaflet::leafletProxy(
mapId = 'weatherMap'
) %>%
leaflet::addCircleMarkers(
lng = as.numeric(weatherMapStations[["lon"]]),
lat = as.numeric(weatherMapStations[["lat"]]),
color = "white",
radius = 7,
weight = 2,
fillColor = weatherMapStations[["colour"]],
opacity = 1,
fillOpacity = 1,
popup = paste0("<b>Station Name: </b>",weatherMapStations[["name"]], "<br><b>Agency: </b>", weatherMapStations[["source"]])
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
leaflet::leaflet() %>%
leaflet::addTiles(urlTemplate = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}') %>%
leaflet::setView(115.8613, -31.9523, 8)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
input$navbar
input$weatherTabset
input$navbar
input$navbar
input$weatherTabset
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::set_golem_options()
modInit <- data.frame(
name = configList(get_golem_config("name", config = "mod_init")),
icon = configList(get_golem_config("icon", config = "mod_init"))
)
modInit
NROW(modInit)
for(i in 1:NROW(modInit)){
print(i)
}
for(i in 1:10){
print(i)
}
golem::set_golem_options()
modInit <- data.frame(
name = configList(get_golem_config("name", config = "mod_init")),
id = configList(get_golem_config("id", config = "mod_init")),
icon = configList(get_golem_config("icon", config = "mod_init"))
)
configList(get_golem_config("name", config = "mod_init")),
modInit <- data.frame(
name = configList(get_golem_config("name", config = "mod_init")),
id = configList(get_golem_config("id", config = "mod_init")),
icon = configList(get_golem_config("icon", config = "mod_init"))
)
modInit
modInit[1,]
modInit[1,"name"]
golem::set_golem_options()
modInit <- data.frame(
name = configList(get_golem_config("name", config = "mod_init")),
id = configList(get_golem_config("id", config = "mod_init")),
icon = configList(get_golem_config("icon", config = "mod_init"))
)
modInit
modInit[1,"name"]
modInit[2,"name"]
View(modInit)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module( name = "leafletMap" )
#' leafletMap UI Function
#'
#' @description A shiny Module.
#'
#' @param id,input,output,session Internal parameters for {shiny}.
#'
#' @noRd
#'
#' @importFrom shiny NS tagList
mod_leafletMap_ui <- function(id){
ns <- NS(id)
tagList(
leaflet::leafletOutput(leafletMap, height = '700px')
)
}
#' leafletMap Server Functions
#'
#' @noRd
mod_leafletMap_server <- function(id){
moduleServer( id, function(input, output, session){
ns <- session$ns
output$leafletMap <- leaflet::renderLeaflet({
leaflet::leaflet() %>%
leaflet::addTiles(urlTemplate = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}') %>%
leaflet::setView(115.8613, -31.9523, 8)
})
})
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library("RPostgreSQL")
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = get_golem_config("host", config = "database"),
port= get_golem_config("port", config = "database"),
dbname= get_golem_config("dbname", config = "database"),
user= get_golem_config("user", config = "database"),
password= get_golem_config("password", config = "database")
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = get_golem_config("host", config = "database"),
port= get_golem_config("port", config = "database"),
dbname= get_golem_config("dbname", config = "database"),
user= get_golem_config("user", config = "database"),
password= get_golem_config("password", config = "database")
)
library("RPostgreSQL")
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
DBI::dbDriver("PostgreSQL")
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write',
sslmode = 'require'
)
ping 130.95.204.63
is.element('RPostgreSQL', installed.packages()[,1])
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
library(DBI)
library("RPostgreSQL")
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = 130.95.204.63,
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
library("RPostgreSQL")
library("DBI")
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.44.39',
#port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
driver <- DBI::dbDriver("PostgreSQL")
connection <- DBI::dbConnect(
drv = driver,
host = '130.95.204.63',
port= '5433',
dbname= 'scevo',
user= 'dpaw_write',
password= 'dpaw_write'
)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
